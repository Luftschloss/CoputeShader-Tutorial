#pragma kernel CullTerrain
#pragma kernel CullTerrainShadow


struct NodeInfoData
{
    float4 rect;
    int mipmap;
    int neighbor;
};
//Matrix4x4 v = Camera.main.worldToCameraMatrix;
//Matrix4x4 p = Camera.main.projectionMatrix; //unity C# use opengl standard projection matrix
//cullingComputeShader.SetMatrix("_VPMatrix", p * v); //set from C#
float4x4 _VPMatrix;

Texture2D<float> _HeightMap;
Texture2D _HiZMap;
uint depthTextureSize;
StructuredBuffer<NodeInfoData> _AllInstancesPosWSBuffer; //will not change until instance count change
AppendStructuredBuffer<NodeInfoData> result;  //Debug
AppendStructuredBuffer<uint> _VisibleInstancesOnlyPosWSIDBuffer; //will set counter to 0 per frame, then fill in by this compute shader
float4 _ShadowBias;
float3 _LightDirection;
float _TerrainHeightSize;
bool isOpenGL;

float3 ApplyShadowBias(float3 positionWS, float3 normalWS, float3 lightDirection)
{
    float invNdotL = 1.0 - saturate(dot(lightDirection, normalWS));
    float scale = invNdotL * _ShadowBias.y;

    // normal bias is negative since we want to apply an inset normal offset
    positionWS = lightDirection * _ShadowBias.xxx + positionWS;
    positionWS = normalWS * scale.xxx + positionWS;
    return positionWS;
}

bool IsInViewport(float4 clipSpacePosition)
{
    if (isOpenGL)
        return clipSpacePosition.x > -clipSpacePosition.w && clipSpacePosition.x < clipSpacePosition.w&&
        clipSpacePosition.y > -clipSpacePosition.w && clipSpacePosition.y < clipSpacePosition.w&&
        clipSpacePosition.z > -clipSpacePosition.w && clipSpacePosition.z < clipSpacePosition.w;
    else
        return clipSpacePosition.x > -clipSpacePosition.w && clipSpacePosition.x < clipSpacePosition.w&&
        clipSpacePosition.y > -clipSpacePosition.w && clipSpacePosition.y < clipSpacePosition.w&&
        clipSpacePosition.z > 0 && clipSpacePosition.z < clipSpacePosition.w;
}

[numthreads(64,1,1)]
void CullTerrain (uint3 id : SV_DispatchThreadID)
{
    float4 nowRect = _AllInstancesPosWSBuffer[id.x].rect;
    float2 minPos = nowRect.xy;
    float2 maxPos = nowRect.xy + nowRect.zw;
    float4 heights = float4(_HeightMap[minPos],
                            _HeightMap[maxPos],
                            _HeightMap[float2(minPos.x, maxPos.y)],
                            _HeightMap[float2(maxPos.x, minPos.y)]);
    float minHeight = _TerrainHeightSize * min(min(heights.x, heights.y), min(heights.z, heights.w));
    float maxHeight = _TerrainHeightSize * max(max(heights.x, heights.y), max(heights.z, heights.w));
    //TODO：目前Terrain在（0,0）点，Bounds顶点位置需要根据Root的世界坐标做修正的
    float4 boundVerts[8];
    boundVerts[0] = float4(minPos.x, minHeight, minPos.y, 1);
    boundVerts[1] = float4(minPos.x, minHeight, maxPos.y, 1);
    boundVerts[2] = float4(maxPos.x, minHeight, minPos.y, 1);
    boundVerts[3] = float4(maxPos.x, minHeight, maxPos.y, 1);
    boundVerts[4] = float4(minPos.x, maxHeight, minPos.y, 1);
    boundVerts[5] = float4(minPos.x, maxHeight, maxPos.y, 1);
    boundVerts[6] = float4(maxPos.x, maxHeight, minPos.y, 1);
    boundVerts[7] = float4(maxPos.x, maxHeight, maxPos.y, 1);
    
    float minX = 1, minY = 1, minZ = 1, maxX = -1, maxY = -1, maxZ = -1;//NDC边界
    //-------------------------------------------------------视锥剔除-------------------------------------------------------
    bool visible = false;
    for (int i = 0; i < 8;i++)
    {
        float4 posCS = mul(_VPMatrix, boundVerts[i]);
        if (!visible && IsInViewport(posCS))
            visible = true;
        float3 ndc = posCS.xyz / posCS.w;
        if (minX > ndc.x) minX = ndc.x;
        if (minY > ndc.y) minY = ndc.y;
        if (minZ > ndc.z) minZ = ndc.z;
        if (maxX < ndc.x) maxX = ndc.x;
        if (maxY < ndc.y) maxY = ndc.y;
        if (maxZ < ndc.z) maxZ = ndc.z;
    }
    if (!visible)
        return;

    //-------------------------------------------------------Hiz遮挡剔除-------------------------------------------------------
        //AABB的ndc(-1,1)转到uv(0,1)
    float2 uvLeftBottom = float2(minX, minY) * 0.5f + 0.5f;
    float2 uvRightTop = float2(maxX, maxY) * 0.5f + 0.5f;
    //DirextX
    float depth = maxZ;
    //OpenGL
    if (isOpenGL)
        depth = minZ * 0.5f + 0.5f;
    //计算应该读取哪层mipmap
    uint mipmapLevel = (uint)clamp(log2(max(maxX - minX, maxY - minY) * 0.5f * depthTextureSize), 0, log2(depthTextureSize) - 4);
    //当前mipmap的大小
    uint size = depthTextureSize / (1 << mipmapLevel);
    //左下角和右下角点所在的像素
    uint2 pixelLeftBottom = uint2(clamp(uvLeftBottom.x * size, 0, size - 1), clamp(uvLeftBottom.y * size, 0, size - 1));
    uint2 pixelRightTop = uint2(clamp(uvRightTop.x * size, 0, size - 1), clamp(uvRightTop.y * size, 0, size - 1));
    //采样对应深度图的对应像素的深度值，并且作比较
    float depthInTexture = _HiZMap.mips[mipmapLevel][pixelLeftBottom].r;
    if (isOpenGL) {
        depthInTexture = max(max(depthInTexture, _HiZMap.mips[mipmapLevel][pixelRightTop].r),
            max(_HiZMap.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r, _HiZMap.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r));
        if (depthInTexture < depth)
            return;
    }
    else {
        depthInTexture = min(min(depthInTexture, _HiZMap.mips[mipmapLevel][pixelRightTop].r),
            min(_HiZMap.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r, _HiZMap.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r));
        if (depthInTexture > depth)
            return;
    }
    
    _VisibleInstancesOnlyPosWSIDBuffer.Append(id.x);
    result.Append(_AllInstancesPosWSBuffer[id.x]);
}

[numthreads(64, 1, 1)]
void CullTerrainShadow(uint3 id : SV_DispatchThreadID)
{
    float4 nowRect = _AllInstancesPosWSBuffer[id.x].rect;
    float2 minPos = nowRect.xy;
    float2 maxPos = nowRect.xy + nowRect.zw;
    float4 heights = float4(_HeightMap[minPos],
                            _HeightMap[maxPos],
                            _HeightMap[float2(minPos.x, maxPos.y)],
                            _HeightMap[float2(maxPos.x, minPos.y)]);
    float minHeight = 600 * min(min(heights.x, heights.y), min(heights.z, heights.w));
    float maxHeight = 600 * max(max(heights.x, heights.y), max(heights.z, heights.w));
    float4 boundVerts[8];
    boundVerts[0] = float4(minPos.x, minHeight, minPos.y, 1);
    boundVerts[1] = float4(minPos.x, minHeight, maxPos.y, 1);
    boundVerts[2] = float4(maxPos.x, minHeight, minPos.y, 1);
    boundVerts[3] = float4(maxPos.x, minHeight, maxPos.y, 1);
    boundVerts[4] = float4(minPos.x, maxHeight, minPos.y, 1);
    boundVerts[5] = float4(minPos.x, maxHeight, maxPos.y, 1);
    boundVerts[6] = float4(maxPos.x, maxHeight, minPos.y, 1);
    boundVerts[7] = float4(maxPos.x, maxHeight, maxPos.y, 1);
    
    bool visible = false;
    float minX = 1, minY = 1, minZ = 1, maxX = -1, maxY = -1, maxZ = -1;//NDC边界

    for (int i = 0; i < 8; i++)
    {
        //boundVerts[i].xyz = ApplyShadowBias(boundVerts[i].xyz, float3(0, 1, 0), _LightDirection);
        float4 posCS = mul(_VPMatrix, boundVerts[i]);
        float4 absPosCS = abs(posCS);
        if (absPosCS.y <= absPosCS.w && absPosCS.x <= absPosCS.w)   //近裁剪面不能使用
            visible = true;
    }
    
    if (visible)
        _VisibleInstancesOnlyPosWSIDBuffer.Append(id.x);
}
